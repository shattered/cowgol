# vim: ts=4 sw=4 et

record RtFCB is
    chan: uint8;
    code: uint8;
    blk: uint16;
    buf: uint16;
    wcnt: uint16;
    last: uint16; # crtn in .readc/writc
end record;

record FCB is
    rt11: RtFCB;
    bufferptr: uint16; # byte just read
    dirty: uint16;
    size: uint16;
    blk: uint16;
    buffer: uint8[512];
    complete: uint16;
end record;

var file_i_channels: [FCB][2];

sub file_i_init(fcb: [FCB], filename: [uint8]) is
    MemSet(fcb as [uint8], 0, @bytesof FCB);
    fcb.blk := 0xffff;
    fcb.bufferptr := 511;
end sub;

sub fcb_i_blockin(fcb: [FCB]): (errno: uint8) is
    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;
    var rtbuf := &fcb.buffer;

    MemSet(&fcb.buffer[0], 0, 512);

#   print("blockin "); print_hex_i16(fcb.blk); print(" ");

    fcb.rt11.blk := fcb.blk;
    @asm ".readw", rtfcb, ", #0, ", rtbuf, ", #256";
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    if carry == 0 then
        fcb.dirty := 0;
    end if;

    errno := carry as uint8;
end sub;

sub fcb_i_pread(fcb: [FCB], buf: [uint8], nbyte: uint16, offset: uint16): (errno: uint8) is
    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;

    # XXX avoid trashing low memory
    if buf < 0o1000 then
        errno := 1;
        return;
    end if;

    fcb.rt11.blk := offset;
    nbyte := (nbyte + 1) >> 1;
#   print("preading "); print_oct_i16(nbyte); print(" words at block ");
#   print_oct_i16(fcb.rt11.blk); print(" into "); print_oct_i16(buf as uint16); print_nl();
    @asm ".readw", rtfcb, ", #0, ", buf, ",", nbyte;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    errno := carry as uint8;
end sub;

sub fcb_i_read(fcb: [FCB], buf: [uint8], nbyte: uint16): (errno: uint8) is
    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;

    # XXX avoid trashing low memory
    if buf < 0o1000 then
        errno := 1;
        return;
    end if;

    fcb.rt11.blk := fcb.blk;
    nbyte := (nbyte + 1) >> 1;
#   print("reading "); print_oct_i16(nbyte); print(" words at block ");
#   print_oct_i16(fcb.rt11.blk); print(" into "); print_oct_i16(buf as uint16); print_nl();
    @asm ".readw", rtfcb, ", #0, ", buf, ",", nbyte;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    errno := carry as uint8;
    if errno == 0 then
        fcb.blk := fcb.blk + (nbyte >> 8);
    end if;
end sub;

sub fcb_i_readc(fcb: [FCB], buf: [uint8], nbyte: uint16): (errno: uint8) is
    sub crtn() is
        var channel: uint16;

        @asm "mov r1,", channel;
        if channel == 0 and file_i_channels[0] != 0 as [FCB] then
            file_i_channels[0].complete := 2;
        end if;
    end sub;

    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;

    # XXX avoid trashing low memory
    if buf < 0o1000 then
        errno := 1;
        return;
    end if;

    fcb.complete := 1;
    fcb.rt11.blk := fcb.blk;
    nbyte := (nbyte + 1) >> 1;
#   print("reading "); print_oct_i16(nbyte); print(" words at block ");
#   print_oct_i16(fcb.rt11.blk); print(" into "); print_oct_i16(buf as uint16); print_nl();
    @asm ".readc", rtfcb, ", #0, ", buf, ",", nbyte, ",", crtn;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";
    @asm "mov r0, ", nbyte;

    errno := carry as uint8;
    if errno == 0 then
        fcb.blk := fcb.blk + (nbyte >> 8);
    end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    file_i_init(fcb, filename);

    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;
    var rtbuf := &fcb.buffer;
    var rad50 := rtbuf + 30;
    var defext: uint16[] := {0, 0, 0, 0};

    # parse ASCII filename into RAD50 rtbuf

    @asm "mov sp, r5";
    @asm ".csisp", rtbuf, ",", defext, ",", filename;
    @asm "mov r5, sp";
    @asm "bcc 1$";
    @asm "movb #1,", carry;
    @asm "1$:";

    if carry != 0 then
        errno := carry as uint8;
        return;
    end if

    @asm ".looku", rtfcb, ", #0, ", rad50;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    errno := carry as uint8;
    if errno == 0 then
        file_i_channels[0] := fcb;
    else
        file_i_channels[0] := 0 as [FCB];
    end if;
end sub;

sub fcb_i_blockout(fcb: [FCB]): (errno: uint8) is
    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;
    var rtbuf := &fcb.buffer;

    if fcb.dirty == 0 then
        errno := 0;
        return;
    end if

    fcb.rt11.blk := fcb.blk;
    @asm ".writw", rtfcb, ", #0, ", rtbuf, ", #256";
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    if carry == 0 then
        fcb.dirty := 0;
    end if;

    errno := carry as uint8;
end sub;

sub fcb_i_changeblock(fcb: [FCB], newblock: uint16): (errno: uint8) is
    if newblock != fcb.blk then
        errno := fcb_i_blockout(fcb);
        if errno == 0 then
            fcb.blk := newblock;
            errno := fcb_i_blockin(fcb);
        end if;
    end if;
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    (errno) := FCBOpenIn(fcb, filename);
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    file_i_init(fcb, filename);

    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;
    var rtbuf := &fcb.buffer;
    var rad50 := rtbuf + 30;
    var defext: uint16[] := {0, 0, 0, 0};

    # parse ASCII filename into RAD50 rtbuf

    @asm "mov sp, r5";
    @asm ".csisp", rtbuf, ",", defext, ",", filename;
    @asm "mov r5, sp";
    @asm "bcc 1$";
    @asm "movb #1,", carry;
    @asm "1$:";

    if carry != 0 then
        errno := carry as uint8;
        return;
    end if

    @asm ".enter", rtfcb, ", #0, ", rad50;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    errno := carry as uint8;
end sub;

sub FCBClose(fcb: [FCB]): (errno: uint8) is
    errno := fcb_i_blockout(fcb);

    var carry: int8 := 0;
    var rtfcb := &fcb.rt11;
    @asm ".close", rtfcb;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    errno := carry as uint8;
end sub;

sub FCBSeek(fcb: [FCB], pos: uint32): (errno: uint8) is
    pos := pos - 1; # seek to *previous* character
    var newblock := (pos >> 9) as uint16;
    var newptr := (pos & 511) as uint16;
    errno := fcb_i_changeblock(fcb, newblock);
    if errno == 0 then
        fcb.bufferptr := newptr;
    end if;
end sub;

sub FCBPos(fcb: [FCB]): (pos: uint32) is
    pos := (((fcb.blk as uint32) << 9) | (fcb.bufferptr as uint32)) + 1;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
    var carry: uint8 := 0;
    var rtfcb := &fcb.rt11;
    var rtbuf := &fcb.buffer;
    var block := &fcb.blk;

    carry := fcb_i_blockout(fcb);
    if carry != 0 then
        len := ~0;
        return;
    end if;

    @asm ".cstat", rtfcb, ", #0, ", rtbuf;
    @asm "bcc 2$";
    @asm "movb #1,", carry;
    @asm "2$:";

    if carry == 0 then
        # 4 = length of file
        # 6 = highest relative block written
#       XXX avoid codegen bugs
#       len := ([(&fcb.buffer[0] + 4) as [uint16]] << 9) as uint32;
#       len := ((fcb.buffer[4] + (fcb.buffer[5] << 8)) << 9) as uint32;
        len := ((fcb.buffer[4] as uint16) + ((fcb.buffer[5] as uint16) << 8)) as uint32;
        len := len << 9;
    else
        len := ~0;
    end if;
end sub;

sub fcb_i_nextchar(fcb: [FCB]): (errno: uint8) is
	fcb.bufferptr := fcb.bufferptr + 1;
	if fcb.bufferptr == 512 then
		errno := fcb_i_changeblock(fcb, fcb.blk + 1);
		fcb.bufferptr := 0;
	end if;
end sub;

sub FCBGetChar(fcb: [FCB]): (c: uint8) is
	if fcb_i_nextchar(fcb) == 0 then
        c := fcb.buffer[fcb.bufferptr];
    else
        # XXX
        c := '$';
    end if
end sub;

sub FCBPutChar(fcb: [FCB], c: uint8) is
	var errno := fcb_i_nextchar(fcb);
	fcb.buffer[fcb.bufferptr] := c;
	fcb.dirty := 1;
end sub;

include "common-file.coh";
